package org.sasanlabs.service.vulnerability.jwt;

import java.io.UnsupportedEncodingException;
import java.security.PrivateKey;
import org.sasanlabs.service.exception.ServiceApplicationException;

/**
 * Signs JWT token based on the various algorithms like: 1. HS256 2. RS256
 *
 * @author KSASAN preetkaran20@gmail.com
 */
public interface IJWTTokenGenerator {

    /**
     * Generates JWT token using Nimbus+Jose library
     *
     * @param tokenToBeSigned
     * @param key
     * @return
     * @throws ServiceApplicationException
     */
    String getJWTToken_RS256(String tokenToBeSigned, PrivateKey key)
            throws ServiceApplicationException;

    /**
     * Signs token using provided secretKey based on the provided algorithm. This method handles
     * signing of token using HS*(Hmac + Sha*) based algorithm and returns entire JWT token with
     * signature<br>
     *
     * <p>Note: This method adds custom java based implementation of HS* algorithm and doesn't use
     * any library like Nimbus+JOSE or JJWT and reason for this is, libraries are having validations
     * related to Key sizes and they doesn't allow weak keys so for signing token using weak keys
     * (for finding vulnerabilities in web applications that are using old implementations or custom
     * implementations) is not possible therefore added this custom implementation for HS*
     * algorithms.
     *
     * <p>
     *
     * @param token
     * @param secretKey
     * @param algorithm
     * @return
     * @throws JWTExtensionValidationException
     * @throws UnsupportedEncodingException
     */
    String getHMACSignedJWTToken(String tokenToBeSigned, byte[] key, String algorithm)
            throws UnsupportedEncodingException, ServiceApplicationException;
}
