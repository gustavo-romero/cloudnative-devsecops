package org.sasanlabs.service.vulnerability.jwt.keys;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.IOException;
import java.io.InputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.JSONSerializationUtils;

/**
 * Singleton class parses SymmetricAlgoKeys.json from scripts/JWT and holds for entire Lifecycle of
 * Application Also this class is responsible to generate the Asymmetric Algorithm keys.
 *
 * @author KSASAN preetkaran20@gmail.com
 */
public class JWTAlgorithmKMS {

    private static final Object MUTEX = new Object();

    private static volatile boolean initDone = false;

    private static Set<SymmetricAlgorithmKey> symmetricAlgorithmKeySet;

    public static Map<String, KeyPair> asymmetricAlgorithmKeyMap = new HashMap<String, KeyPair>();

    private static final String SYMMETRIC_KEYS_FILE = "/scripts/JWT/SymmetricAlgoKeys.json";

    private static final String KEY_STORE_FILE_NAME = "sasanlabs.p12";

    private static final String KEY_STORE_PASSWORD = "changeIt";

    private static final String RSA_KEY_ALIAS = "SasanLabs";

    private static final transient Logger LOGGER = LogManager.getLogger(JWTAlgorithmKMS.class);

    public JWTAlgorithmKMS() {
        if (!initDone) {
            synchronized (MUTEX) {
                if (!initDone) {
                    initialize();
                    initDone = true;
                }
            }
        }
    }

    /**
     * Returns first matched Key for Algorithm and KeyStrength.
     *
     * @param algorithm
     * @param keyStrength
     * @return
     */
    public Optional<SymmetricAlgorithmKey> getSymmetricAlgorithmKey(
            String algorithm, KeyStrength keyStrength) {
        return symmetricAlgorithmKeySet.stream()
                .filter(
                        (symmetricAlgorithmKey) ->
                                symmetricAlgorithmKey.getAlgorithm().equals(algorithm)
                                        && symmetricAlgorithmKey.getStrength().equals(keyStrength))
                .findFirst();
    }

    /**
     * Returns Asymmetric Algorithm Keys
     *
     * @param algorithm
     * @return
     */
    public Optional<KeyPair> getAsymmetricAlgorithmKey(String algorithm) {
        return Optional.ofNullable(asymmetricAlgorithmKeyMap.get(algorithm));
    }

    private void loadAsymmetricAlgorithmKeys() {
        try {
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(
                    getClass().getClassLoader().getResourceAsStream(KEY_STORE_FILE_NAME),
                    KEY_STORE_PASSWORD.toCharArray());
            Key privateKey = null;
            Certificate certificate = null;
            privateKey = keyStore.getKey(RSA_KEY_ALIAS, KEY_STORE_PASSWORD.toCharArray());
            certificate = keyStore.getCertificate(RSA_KEY_ALIAS);
            // Need to handle for case of PS256 and Elliptical curve cryptography
            if (privateKey.getAlgorithm().contains("RSA")) {
                asymmetricAlgorithmKeyMap.put(
                        "RS256", new KeyPair(certificate.getPublicKey(), (PrivateKey) privateKey));
            }
        } catch (KeyStoreException
                | NoSuchAlgorithmException
                | CertificateException
                | IOException
                | UnrecoverableKeyException e) {
            LOGGER.error(e);
        }
    }

    private void initialize() {
        try (InputStream jwtSymmetricKeyStream =
                this.getClass().getResourceAsStream(SYMMETRIC_KEYS_FILE)) {
            symmetricAlgorithmKeySet =
                    JSONSerializationUtils.deserialize(
                            jwtSymmetricKeyStream,
                            new TypeReference<Set<SymmetricAlgorithmKey>>() {});
        } catch (IOException e) {
            LOGGER.error("Following error occurred while parsing SymmetricAlgoKeys", e);
        }
        loadAsymmetricAlgorithmKeys();
    }
}
