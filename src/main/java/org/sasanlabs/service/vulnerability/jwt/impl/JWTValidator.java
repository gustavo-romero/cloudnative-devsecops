package org.sasanlabs.service.vulnerability.jwt.impl;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSVerifier;
import com.nimbusds.jose.crypto.ECDSAVerifier;
import com.nimbusds.jose.crypto.Ed25519Verifier;
import com.nimbusds.jose.crypto.RSASSAVerifier;
import com.nimbusds.jose.jwk.ECKey;
import com.nimbusds.jose.jwk.OctetKeyPair;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jwt.SignedJWT;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.interfaces.RSAPublicKey;
import java.text.ParseException;
import java.util.Base64;
import org.json.JSONObject;
import org.sasanlabs.service.exception.ExceptionStatusCodeEnum;
import org.sasanlabs.service.exception.ServiceApplicationException;
import org.sasanlabs.service.vulnerability.jwt.IJWTTokenGenerator;
import org.sasanlabs.service.vulnerability.jwt.IJWTValidator;
import org.sasanlabs.service.vulnerability.jwt.bean.JWTUtils;
import org.springframework.stereotype.Component;

/**
 * JWTValidator is used for validating jwt token. it will contain various implementations of
 * validating libraries.
 *
 * @author KSASAN preetkaran20@gmail.com
 */
@Component
public class JWTValidator implements IJWTValidator {

    private IJWTTokenGenerator libBasedJWTGenerator;

    public JWTValidator(IJWTTokenGenerator libBasedJWTGenerator) {
        this.libBasedJWTGenerator = libBasedJWTGenerator;
    }

    @Override
    public boolean customHMACValidator(String token, byte[] key, String algorithm)
            throws ServiceApplicationException {
        try {
            String[] jwtParts = token.split(JWTUtils.JWT_TOKEN_PERIOD_CHARACTER_REGEX, -1);
            String newTokenSigned =
                    libBasedJWTGenerator.getHMACSignedJWTToken(
                            jwtParts[0] + JWTUtils.JWT_TOKEN_PERIOD_CHARACTER + jwtParts[1],
                            key,
                            algorithm);
            if (newTokenSigned.equals(token)) {
                return true;
            } else {
                return false;
            }
        } catch (UnsupportedEncodingException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
    }

    @Override
    public boolean customHMACNullByteVulnerableValidator(String token, byte[] key, String algorithm)
            throws ServiceApplicationException {
        try {
            String[] jwtParts = token.split(JWTUtils.JWT_TOKEN_PERIOD_CHARACTER_REGEX, -1);
            if (jwtParts.length < 3) {
                return false;
            }
            int nullByteIndex =
                    jwtParts[2].indexOf(
                            URLEncoder.encode(
                                    String.valueOf((char) 0), StandardCharsets.UTF_8.name()));
            if (nullByteIndex > 0) {
                jwtParts[2] = jwtParts[2].substring(0, nullByteIndex);
            }
            return this.customHMACValidator(
                    jwtParts[0]
                            + JWTUtils.JWT_TOKEN_PERIOD_CHARACTER
                            + jwtParts[1]
                            + JWTUtils.JWT_TOKEN_PERIOD_CHARACTER
                            + jwtParts[2],
                    key,
                    algorithm);
        } catch (UnsupportedEncodingException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
    }

    @Override
    public boolean customHMACNoneAlgorithmVulnerableValidator(
            String token, byte[] key, String algorithm) throws ServiceApplicationException {
        try {
            String[] jwtParts = token.split(JWTUtils.JWT_TOKEN_PERIOD_CHARACTER_REGEX, -1);
            JSONObject header =
                    new JSONObject(
                            JWTUtils.getString(
                                    Base64.getUrlDecoder()
                                            .decode(jwtParts[0].getBytes(StandardCharsets.UTF_8))));
            if (header.has(JWTUtils.JWT_ALGORITHM_KEY_HEADER)) {
                String alg = header.getString(JWTUtils.JWT_ALGORITHM_KEY_HEADER);
                if (JWTUtils.NONE_ALGORITHM.contentEquals(alg.toLowerCase())) {
                    return true;
                }
            }
            return this.customHMACValidator(token, key, algorithm);
        } catch (UnsupportedEncodingException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
    }

    @Override
    public boolean genericJWTTokenValidator(String token, Key key, String algorithm)
            throws ServiceApplicationException {
        try {
            if (algorithm.startsWith(JWTUtils.JWT_HMAC_ALGORITHM_IDENTIFIER)) {
                return this.customHMACValidator(token, key.getEncoded(), algorithm);
            } else {
                JWSVerifier verifier = null;
                if (algorithm.startsWith(JWTUtils.JWT_RSA_PSS_ALGORITHM_IDENTIFIER)
                        || algorithm.startsWith(JWTUtils.JWT_RSA_ALGORITHM_IDENTIFIER)) {
                    verifier = new RSASSAVerifier((RSAPublicKey) key);
                } else if (algorithm.startsWith(JWTUtils.JWT_EC_ALGORITHM_IDENTIFIER)) {
                    // TODO adding EC and OCTET for now not needed so not writing that.
                    return false;
                }
                SignedJWT signedJWT = SignedJWT.parse(token);
                return signedJWT.verify(verifier);
            }
        } catch (JOSEException | ParseException | ServiceApplicationException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
    }

    @Override
    public boolean confusionAlgorithmVulnerableValidator(String token, Key key)
            throws ServiceApplicationException {
        try {
            String[] jwtParts = token.split(JWTUtils.JWT_TOKEN_PERIOD_CHARACTER_REGEX, -1);
            JSONObject header =
                    new JSONObject(
                            JWTUtils.getString(
                                    Base64.getUrlDecoder()
                                            .decode(jwtParts[0].getBytes(StandardCharsets.UTF_8))));
            if (header.has(JWTUtils.JWT_ALGORITHM_KEY_HEADER)) {
                String alg = header.getString(JWTUtils.JWT_ALGORITHM_KEY_HEADER);
                return this.genericJWTTokenValidator(token, key, alg);
            }
        } catch (UnsupportedEncodingException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
        return false;
    }

    @Override
    public boolean jwkKeyHeaderPublicKeyTrustingVulnerableValidator(String token)
            throws ServiceApplicationException {
        try {
            String[] jwtParts = token.split(JWTUtils.JWT_TOKEN_PERIOD_CHARACTER_REGEX, -1);
            JSONObject header =
                    new JSONObject(
                            JWTUtils.getString(
                                    Base64.getUrlDecoder()
                                            .decode(jwtParts[0].getBytes(StandardCharsets.UTF_8))));
            if (header.has(JWTUtils.JWT_ALGORITHM_KEY_HEADER)) {
                String alg = header.getString(JWTUtils.JWT_ALGORITHM_KEY_HEADER);
                if (!alg.startsWith(JWTUtils.JWT_HMAC_ALGORITHM_IDENTIFIER)) {
                    JWSVerifier verifier = null;
                    if (header.has(JWTUtils.JSON_WEB_KEY_HEADER)) {
                        if (alg.startsWith(JWTUtils.JWT_RSA_ALGORITHM_IDENTIFIER)
                                || alg.startsWith(JWTUtils.JWT_RSA_PSS_ALGORITHM_IDENTIFIER)) {
                            RSAKey rsaKey =
                                    RSAKey.parse(
                                            header.getJSONObject(JWTUtils.JSON_WEB_KEY_HEADER)
                                                    .toString());
                            verifier = new RSASSAVerifier(rsaKey.toRSAPublicKey());
                        } else if (alg.startsWith(JWTUtils.JWT_EC_ALGORITHM_IDENTIFIER)) {
                            ECKey ecKey =
                                    ECKey.parse(
                                            header.getJSONObject(JWTUtils.JSON_WEB_KEY_HEADER)
                                                    .toString());
                            verifier = new ECDSAVerifier(ecKey.toECPublicKey());
                        } else if (alg.startsWith(JWTUtils.JWT_OCTET_ALGORITHM_IDENTIFIER)) {
                            verifier =
                                    new Ed25519Verifier(
                                            OctetKeyPair.parse(
                                                    header.getString(
                                                            JWTUtils.JSON_WEB_KEY_HEADER)));
                        }
                        SignedJWT signedJWT = SignedJWT.parse(token);
                        return signedJWT.verify(verifier);
                    }
                }
            }
        } catch (UnsupportedEncodingException | ParseException | JOSEException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
        return false;
    }

    @Override
    public boolean customHMACEmptyTokenVulnerableValidator(
            String token, String key, String algorithm) throws ServiceApplicationException {
        try {
            String[] jwtParts = token.split(JWTUtils.JWT_TOKEN_PERIOD_CHARACTER_REGEX);
            if (jwtParts.length == 0) {
                return true;
            } else {
                JSONObject header =
                        new JSONObject(
                                JWTUtils.getString(
                                        Base64.getUrlDecoder()
                                                .decode(
                                                        jwtParts[0].getBytes(
                                                                StandardCharsets.UTF_8))));
                if (header.has(JWTUtils.JWT_ALGORITHM_KEY_HEADER)) {
                    String alg = header.getString(JWTUtils.JWT_ALGORITHM_KEY_HEADER);
                    if (alg.startsWith(JWTUtils.JWT_HMAC_ALGORITHM_IDENTIFIER)) {
                        return this.customHMACValidator(token, JWTUtils.getBytes(key), algorithm);
                    }
                }
                return false;
            }
        } catch (UnsupportedEncodingException ex) {
            throw new ServiceApplicationException(
                    "Following exception occurred: ", ex, ExceptionStatusCodeEnum.SYSTEM_ERROR);
        }
    }
}
