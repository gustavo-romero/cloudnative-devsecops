package org.sasanlabs.service.vulnerability.openRedirect;

/**
 * This class contains the vulnerabilities related to Open Redirects. Redirects implemented by this
 * class are based on {@code Meta Tag}. <br>
 * Important Links: <br>
 * 1. <a href= "http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38</a>
 * <br>
 * 2. <a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601</a><br>
 * 3. <a href= "https://portswigger.net/kb/issues/00500100_open-redirection-reflected">Port
 * Swigger's vulnerability documentation</a><br>
 * 4. <a href="https://en.wikipedia.org/wiki/URL_redirection">Wiki link for describing the purpose
 * of URL Redirection</a><br>
 * 5. <a href="https://github.com/payloadbox/open-redirect-payload-list">Payloads for Open
 * Redirect</a><br>
 * 6. <a href="https://www.seroundtable.com/google-meta-refresh-redirects-work-25335.html">Meta tag
 * based Redirects vs 3XX redirects</a><br>
 * <br>
 * Some myths: <a href=
 * "https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects">Are
 * URL shorteners “vulnerable” due to open redirects? </a><br>
 * <br>
 * Note: as we have implemented entire architecture around the Ajax calls hence there is no direct
 * way to provide the User Interface for URL Redirect Vulnerability hence these will be exposed as
 * an API and user can follow instructions suggested in UI for exploiting this Vulnerability.
 *
 * @author preetkaran20@gmail.com KSASAN
 */
// @VulnerableAppRestController(
//        descriptionLabel = "OPEN_REDIRECTION_VULNERABILITY_META_TAG_BASED",
//        value = "MetaTagBasedInjection",
//        type = {VulnerabilityType.OPEN_REDIRECT})
public class MetaTagBasedInjection {

    //    private static final String META_TAG_PAYLOAD =
    //            "<html><head><meta http-equiv=\"refresh\" content=\"10;%s\" /></head><body>
    // VulnerableApp Job is Running %s </body></html>";
    //
    //    private static final String STATUS = "status";
    //
    //    @VulnerableAppRequestMapping(
    //            value = LevelConstants.LEVEL_1,
    //            descriptionLabel = "URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG")
    //    public ResponseEntity<String> getVulnerablePayloadLevel1(
    //            @RequestParam(value = STATUS, required = false) String statusUrl) {
    //        return new ResponseEntity<>(
    //                String.format(
    //                        META_TAG_PAYLOAD, statusUrl == null ? "" : "url=" + statusUrl, new
    // Date()),
    //                HttpStatus.OK);
    //    }
    //
    //    @VulnerableAppRequestMapping(
    //            value = LevelConstants.LEVEL_2,
    //            descriptionLabel = "URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG")
    //    public ResponseEntity<String> getVulnerablePayloadLevel(
    //            @RequestParam Map<String, String> queryParams) {
    //        Iterator<Entry<String, String>> iterator = queryParams.entrySet().iterator();
    //        String metaTag = "";
    //        if (iterator.hasNext()) {
    //            Entry<String, String> entry = iterator.next();
    //            metaTag = String.format(META_TAG_PAYLOAD, entry.getValue());
    //        }
    //        return new ResponseEntity<>(
    //                GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(metaTag),
    // HttpStatus.OK);
    //    }
}
